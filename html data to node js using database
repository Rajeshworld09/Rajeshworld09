.HTML
  <!DOCTYPE html>
<html lang = "en">
<head>
  <meta charset = "UTF-8">
  <link rel = "stylesheet" href="style.css">
  <title> My Form </title>
</head>
<body>
  <header>
    <h1>Customer Database</h1>
  </header>
  <form action="/add" method="POST">
    <fieldset>
      <h3>Add new customer</h3>
      <label>Customer ID</label>
      <input type ="text" id = 'empID' name="id" required>
      <br><br>
      <label>Name</label>
      <input type="text" id = "name" name="name" required>
      <br><br>
      <button type ="reset">Reset</button>
      <button type ="submit">Submit</button>
    </fieldset>
  </form>
<form action="/view" method="POST">
  <fieldset>
    <h3>View an Customer</h3>
    <label>Customer ID</label>
    <input type="text" id="empID" name="id" required>
    <br><br>
    <button type ="reset">Reset</button>
    <button type ="submit">Submit</button>
    <br><br><br>
  </fieldset>
 </form>
<form action="/update" method="POST">
  <fieldset>
    <h3>Update an Customer</h3>
    <label>Customer ID</label>
    <input type ="text" id = 'empID' name="id" required>
    <br><br>
    <label>New Name</label>
    <input type="text" id = "name" name="name" required>
    <br><br>
    <button type ="reset">Reset</button>
    <button type ="submit">Submit</button>
  </fieldset>
 </form>
<form action="/delete" method="POST">
  <fieldset>
    <h3>Delete an Customer</h3>
    <label>Customer ID</label>
    <input type ="text" id = 'empID' name="id" required>
    <br><br>
    <button type ="reset">Reset</button>
    <button type ="submit">Submit</button>
    <br><br><br>
  </fieldset>
 </form>

  </body>
</html>




.css
   body{
 background-color: #ffffff;
}
header{
 text-align: center;
 height: 100px;
 padding-top: 1px;
 background-color: #000000;
 color: #FFFFFF;
 font-size: x-large;
}
h3{
 margin-top: 2px;
 text-align: center;
 background-color: #000000;
 color: #FFFFFF;
}
form{
 width: 45%;
 display: inline-block;
 margin: 20px;
}

.js

var express = require("express")
var bodyParser = require("body-parser")
var mongoose = require("mongoose")

const app = express()

app.use(bodyParser.json())
app.use(express.static('public'))
app.use(bodyParser.urlencoded({
    extended:true
}))

mongoose.connect("mongodb://127.0.0.1:27017/users",(err)=>{
if(err)
	console.log("DB not connected");
else
	console.log("DB Connected");
});
const ns=new mongoose.Schema({
id:String,
name:String});
const nm=new mongoose.model("records",ns);
var db = mongoose.connection;

db.on('error',()=>console.log("Error in Connecting to Database"));
db.once('open',()=>console.log("Connected to Database"))

app.post("/insert",(req,res)=>{
    var id = req.body.empID;
    var name = req.body.name;
    var data =new nm( {
        "id": id,
        "name" : name,
    });
data.save();

        console.log("Record Inserted Successfully");

}).listen(3000);




.js

    var sqlite3 = require('sqlite3').verbose();
var express = require('express');
var http = require('http');
var path = require("path");
var bodyParser = require('body-parser');
var helmet = require('helmet');
var rateLimit = require("express-rate-limit");

var app = express();
var server = http.createServer(app);

const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100 // limit each IP to 100 requests per windowMs
});


var db = new sqlite3.Database('./database/employees.db');


app.use(bodyParser.urlencoded({extended: false}));
app.use(express.static(path.join(__dirname,'./public')));
app.use(helmet());
app.use(limiter);
db.run('CREATE TABLE IF NOT EXISTS emp(id TEXT, name TEXT)');
app.get('/', function(req,res){
  res.sendFile(path.join(__dirname,'./public/emp.html'));
});
// Insert
app.post('/add', function(req,res){
  db.serialize(()=>{
    db.run('INSERT INTO emp(id,name) VALUES(?,?)', [req.body.id, req.body.name], function(err) {
      if (err) {
        return console.log(err.message);
      }
      console.log("New employee has been added");
      res.send("New employee has been added into the database with ID = "+req.body.id+ " and Name = "+req.body.name);
    });
});
});
// View
app.post('/view', function(req,res){
  db.serialize(()=>{
    db.each('SELECT id ID, name NAME FROM emp WHERE id =?', [req.body.id], function(err,row){     //db.each() is only one which is funtioning while reading data from the DB
      if(err){
        res.send("Error encountered while displaying");
        return console.error(err.message);
      }
      res.send(` ID: ${row.ID},    Name: ${row.NAME}`);
      console.log("Entry displayed successfully");
    });
  });
});
//UPDATE
app.post('/update', function(req,res){
  db.serialize(()=>{
    db.run('UPDATE emp SET name = ? WHERE id = ?', [req.body.name,req.body.id], function(err){
      if(err){
        res.send("Error encountered while updating");
        return console.error(err.message);
      }
      res.send("Entry updated successfully");
      console.log("Entry updated successfully");
    });
  });
});
//DELETE
app.post('/delete', function(req,res){
  db.serialize(()=>{
    db.run('DELETE FROM emp WHERE id = ?', req.body.id, function(err) {
      if (err) {
        res.send("Error encountered while deleting");
        return console.error(err.message);
      }
      res.send("Entry deleted");
      console.log("Entry deleted");
    });
  });
});
app.get('/close', function(req,res){
  db.close((err) => {
    if (err) {
      res.send('There is some error in closing the database');
      return console.error(err.message);
    }
    console.log('Closing the database connection.');
    res.send('Database connection successfully closed');
  });
});
server.listen(3000,function(){ 
    console.log("Server listening on port: 3000");
